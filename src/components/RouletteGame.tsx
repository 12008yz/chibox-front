import { useState, useEffect, useRef } from 'react';
import { useGetBonusStatusQuery, usePlayRouletteMutation } from '../features/user/userApi';
import Modal from './Modal';

interface RouletteGameProps {
  isOpen: boolean;
  onClose: () => void;
}

interface RouletteItem {
  id: number;
  type: 'sub_1_day' | 'sub_3_days' | 'empty';
  label: string;
  color: string;
  bgColor: string;
  icon: string;
}

const RouletteGame: React.FC<RouletteGameProps> = ({ isOpen, onClose }) => {
  const [isSpinning, setIsSpinning] = useState(false);
  const [gameState, setGameState] = useState<'idle' | 'spinning' | 'finished'>('idle');
  const [winnerIndex, setWinnerIndex] = useState<number | null>(null);
  const [gameResult, setGameResult] = useState<string>('');
  const [showParticles, setShowParticles] = useState(false);
  const [rotationAngle, setRotationAngle] = useState(0);
  const wheelRef = useRef<SVGGElement>(null);

  const { data: bonusStatus, refetch: refetchBonusStatus } = useGetBonusStatusQuery(undefined, {
    refetchOnMountOrArgChange: true,
  });
  const [playRoulette, { isLoading: isPlaying }] = usePlayRouletteMutation();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ - 9 —Å–µ–∫—Ç–æ—Ä–æ–≤, —Ç–æ–ª—å–∫–æ 2 —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
  const rouletteItems: RouletteItem[] = [
    { id: 0, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 1, type: 'sub_1_day', label: '+1 –î–µ–Ω—å', color: '#FBBF24', bgColor: '#F59E0B', icon: '‚≠ê' },
    { id: 2, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 3, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 4, type: 'sub_3_days', label: '+3 –î–Ω—è', color: '#34D399', bgColor: '#10B981', icon: 'üíé' },
    { id: 5, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 6, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 7, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
    { id: 8, type: 'empty', label: '–ü—É—Å—Ç–æ', color: '#9CA3AF', bgColor: '#4B5563', icon: 'üí´' },
  ];

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      setGameState('idle');
      setIsSpinning(false);
      setWinnerIndex(null);
      setGameResult('');
      setShowParticles(false);
      setRotationAngle(0);
      refetchBonusStatus();
    }
  }, [isOpen, refetchBonusStatus]);

  const handleSpin = async () => {
    if (isSpinning || gameState !== 'idle' || isPlaying) return;

    setIsSpinning(true);
    setGameState('spinning');
    setWinnerIndex(null);

    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await playRoulette().unwrap();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π —É–≥–æ–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const finalAngle = response.rotation_angle;

      console.log('üé∞ Server response:', {
        winnerIndex: response.winner_index,
        rotationAngle: finalAngle.toFixed(1),
        prizeType: response.prize_type
      });

      // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
      const sectorAngle = 360 / rouletteItems.length;
      const normalizedAngle = ((finalAngle % 360) + 360) % 360;
      const winnerSectorCenter = response.winner_index * sectorAngle; // –¶–µ–Ω—Ç—Ä —Å–µ–∫—Ç–æ—Ä–∞ N –Ω–∞ N*40¬∞
      const sectorCenterAfterRotation = (winnerSectorCenter + normalizedAngle) % 360;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–µ–ª–æ—á–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
      const expectedPointerTarget = (360 - normalizedAngle) % 360;
      const actualWinnerItem = rouletteItems[response.winner_index];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: –∫—É–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
      const distanceFromPointer = Math.min(
        Math.abs(sectorCenterAfterRotation),
        Math.abs(sectorCenterAfterRotation - 360)
      );
      const isCorrectAlignment = distanceFromPointer <= sectorAngle / 2;

      console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä—É–ª–µ—Ç–∫–∏:', {
        winnerSector: response.winner_index,
        sectorAngle: sectorAngle.toFixed(1) + '¬∞',
        wheelRotation: normalizedAngle.toFixed(1) + '¬∞',
        sectorFinalPosition: sectorCenterAfterRotation.toFixed(1) + '¬∞',
        pointerPosition: '0¬∞ (–≤–µ—Ä—Ö)',
        distanceFromPointer: distanceFromPointer.toFixed(1) + '¬∞',
        isAlignedCorrectly: isCorrectAlignment,
        expectedPrize: actualWinnerItem.type,
        actualResult: response.prize_type,
        resultsMatch: actualWinnerItem.type === response.prize_type,
        message: response.message
      });

      await animateRouletteToAngle(finalAngle);

      // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–¥–∞ –†–ï–ê–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∞
      const actualSectorIndex = calculateSectorUnderPointer(finalAngle);
      const serverSaidIndex = response.winner_index;

      console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –†–£–õ–ï–¢–ö–ò:', {
        serverSaidWinner: serverSaidIndex,
        actualPointerAt: actualSectorIndex,
        isAccurate: serverSaidIndex === actualSectorIndex,
        serverItem: rouletteItems[serverSaidIndex],
        actualItem: rouletteItems[actualSectorIndex],
        finalAngle: finalAngle.toFixed(1)
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π (–¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏)
      const realWinnerIndex = actualSectorIndex;
      const realWinnerItem = rouletteItems[realWinnerIndex];

      setWinnerIndex(realWinnerIndex);
      setGameState('finished');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è
      if (realWinnerItem.type !== 'empty') {
        setGameResult(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${realWinnerItem.label}!`);
        setShowParticles(true);
        setTimeout(() => setShowParticles(false), 3000);
      } else {
        setGameResult('–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
      }

      if (response.prize_type !== 'empty') {
        setGameResult(response.message || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–∑!');
        setShowParticles(true);
        setTimeout(() => setShowParticles(false), 3000);
      } else {
        setGameResult('–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
      }

      refetchBonusStatus();
    } catch (error: any) {
      const errorMessage = error?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ';
      setGameResult(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      setGameState('finished');
    } finally {
      setIsSpinning(false);
    }
  };

  const animateRouletteToAngle = (targetAngle: number): Promise<void> => {
    return new Promise((resolve) => {
      console.log('üé∞ Animating wheel to angle:', targetAngle);
      setRotationAngle(targetAngle);

      // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 4 —Å–µ–∫—É–Ω–¥—ã - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å CSS transition
      setTimeout(resolve, 4000);
    });
  };

  // üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
  const calculateSectorUnderPointer = (rotationAngle: number): number => {
    const sectorAngle = 360 / rouletteItems.length; // 40¬∞

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 360)
    const normalizedRotation = ((rotationAngle % 360) + 360) % 360;

    // –°—Ç—Ä–µ–ª–æ—á–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 0¬∞ (–≤–≤–µ—Ä—Ö)
    // –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞ –Ω–∞ normalizedRotation,
    // —Å–µ–∫—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –Ω–∞ —É–≥–ª–µ X —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É–≥–ª–µ (X + normalizedRotation) % 360

    // –°–µ–∫—Ç–æ—Ä 0 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ 0¬∞, –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–Ω –Ω–∞ normalizedRotation
    // –°–µ–∫—Ç–æ—Ä 1 –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ 40¬∞, –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–Ω –Ω–∞ (40 + normalizedRotation) % 360
    // –ò —Ç.–¥.

    // –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ 0¬∞ (–ø–æ–¥ —Å—Ç—Ä–µ–ª–æ—á–∫–æ–π)
    // –≠—Ç–æ —Å–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –Ω–∞ —É–≥–ª–µ (-normalizedRotation) % 360
    const originalAngleUnderPointer = (360 - normalizedRotation) % 360;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ —É–≥–ª—É
    let sectorIndex = Math.floor(originalAngleUnderPointer / sectorAngle);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    sectorIndex = Math.max(0, Math.min(sectorIndex, rouletteItems.length - 1));

    console.log('üîç –†–∞—Å—á–µ—Ç —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥ —Å—Ç—Ä–µ–ª–æ—á–∫–æ–π:', {
      rotationAngle: rotationAngle.toFixed(1),
      normalizedRotation: normalizedRotation.toFixed(1),
      originalAngleUnderPointer: originalAngleUnderPointer.toFixed(1),
      sectorAngle: sectorAngle.toFixed(1),
      calculatedSectorIndex: sectorIndex
    });

    return sectorIndex;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ SVG
  const createSector = (item: RouletteItem, index: number) => {
    const radius = 140;
    const centerX = 150;
    const centerY = 150;
    const sectorAngle = 360 / rouletteItems.length; // 40 –≥—Ä–∞–¥—É—Å–æ–≤ –Ω–∞ —Å–µ–∫—Ç–æ—Ä

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–µ–∫—Ç–æ—Ä—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å–µ–∫—Ç–æ—Ä 0 –±—ã–ª —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–≤–µ—Ä—Ö—É
    // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ -sectorAngle/2, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä —Å–µ–∫—Ç–æ—Ä–∞ 0 –±—ã–ª –Ω–∞ 0¬∞
    const startAngle = index * sectorAngle - sectorAngle/2;
    const endAngle = (index + 1) * sectorAngle - sectorAngle/2;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–ª—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
    const startRad = (startAngle * Math.PI) / 180;
    const endRad = (endAngle * Math.PI) / 180;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Ç–∏
    const x1 = centerX + radius * Math.cos(startRad);
    const y1 = centerY + radius * Math.sin(startRad);
    const x2 = centerX + radius * Math.cos(endRad);
    const y2 = centerY + radius * Math.sin(endRad);

    const largeArc = sectorAngle > 180 ? 1 : 0;

    const pathData = [
      `M ${centerX} ${centerY}`,
      `L ${x1} ${y1}`,
      `A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2}`,
      'Z'
    ].join(' ');

    // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–≤ —Ü–µ–Ω—Ç—Ä–µ —Å–µ–∫—Ç–æ—Ä–∞)
    const textAngle = startAngle + sectorAngle / 2;
    const textRad = (textAngle * Math.PI) / 180;
    const textRadius = radius * 0.7;
    const textX = centerX + textRadius * Math.cos(textRad);
    const textY = centerY + textRadius * Math.sin(textRad);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–∫—Ç–æ—Ä –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º
    const isWinner = winnerIndex === index && gameState === 'finished';

    return (
      <g key={item.id}>
        <path
          d={pathData}
          fill={item.bgColor}
          stroke={isWinner ? '#FFD700' : '#1F2937'}
          strokeWidth={isWinner ? '4' : '2'}
          className={`transition-all duration-300 ${isWinner ? 'drop-shadow-2xl' : ''}`}
          style={{
            filter: isWinner ? 'brightness(1.3) drop-shadow(0 0 20px rgba(255, 215, 0, 0.8))' : 'none'
          }}
        />
        <text
          x={textX}
          y={textY - 8}
          textAnchor="middle"
          dominantBaseline="middle"
          fill={item.color}
          fontSize="18"
          className="font-bold pointer-events-none"
        >
          {item.icon}
        </text>
        <text
          x={textX}
          y={textY + 8}
          textAnchor="middle"
          dominantBaseline="middle"
          fill={item.color}
          fontSize="9"
          className="font-medium pointer-events-none"
        >
          {item.label}
        </text>
      </g>
    );
  };

  const isAvailable = bonusStatus?.is_available;
  const timeUntilNext = bonusStatus?.time_until_next_seconds;

  const formatTimeLeft = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="">
      <div className="relative bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-4 sm:p-6 lg:p-8 rounded-2xl w-full max-w-lg mx-auto">
        {/* Particles Effect */}
        {showParticles && (
          <div className="absolute inset-0 pointer-events-none overflow-hidden rounded-2xl z-10">
            {Array.from({ length: 20 }, (_, i) => (
              <div
                key={i}
                className="absolute w-2 h-2 sm:w-3 sm:h-3 rounded-full animate-ping"
                style={{
                  backgroundColor: ['#FBBF24', '#34D399', '#F59E0B', '#10B981'][Math.floor(Math.random() * 4)],
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 2}s`,
                  animationDuration: `${0.8 + Math.random() * 0.6}s`
                }}
              />
            ))}
          </div>
        )}

        {/* Header */}
        <div className="text-center mb-6">
          <div className="text-3xl sm:text-4xl mb-2">üé∞</div>
          <h2 className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-red-400 to-red-600 bg-clip-text text-transparent">
            –†—É–ª–µ—Ç–∫–∞ –£–¥–∞—á–∏
          </h2>
          <p className="text-gray-400 text-xs sm:text-sm mt-2">
            –ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!
          </p>
        </div>

        {!isAvailable && gameState === 'idle' ? (
          // –ë–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          <div className="text-center space-y-4 sm:space-y-6">
            <div className="bg-red-900/20 border border-red-500/30 rounded-xl p-4 sm:p-6">
              <div className="text-3xl sm:text-4xl mb-3">‚è∞</div>
              <div className="text-red-400 mb-2 font-medium text-sm sm:text-base">–†—É–ª–µ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
              {timeUntilNext && (
                <div className="text-gray-300 text-xs sm:text-sm">
                  –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑: <span className="font-mono text-yellow-400">{formatTimeLeft(timeUntilNext)}</span>
                </div>
              )}
            </div>
            <button
              onClick={onClose}
              className="w-full py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-xl transition-all duration-200 text-sm sm:text-base"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        ) : (
          // –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
          <div className="space-y-4 sm:space-y-6">
            {/* –†—É–ª–µ—Ç–∫–∞ */}
            <div className="flex justify-center">
              <div className="relative">
                {/* SVG –†—É–ª–µ—Ç–∫–∞ */}
                <div className="relative w-72 h-72 sm:w-80 sm:h-80">
                  <svg width="100%" height="100%" viewBox="0 0 300 300" className="drop-shadow-2xl">
                    {/* –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ */}
                    <circle
                      cx="150"
                      cy="150"
                      r="145"
                      fill="none"
                      stroke="#D97706"
                      strokeWidth="6"
                      className="drop-shadow-lg"
                    />

                    {/* –ö–æ–ª–µ—Å–æ —Ä—É–ª–µ—Ç–∫–∏ */}
                    <g
                      ref={wheelRef}
                      style={{
                        transformOrigin: '150px 150px',
                        transform: `rotate(${rotationAngle}deg)`,
                        transition: isSpinning ? 'transform 4s cubic-bezier(0.23, 1, 0.32, 1)' : 'none'
                      }}
                    >
                      {rouletteItems.map((item, index) => createSector(item, index))}
                    </g>

                    {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
                    <circle
                      cx="150"
                      cy="150"
                      r="25"
                      fill="#1F2937"
                      stroke="#D97706"
                      strokeWidth="3"
                    />

                    {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞ */}
                    <text
                      x="150"
                      y="155"
                      textAnchor="middle"
                      dominantBaseline="middle"
                      fill="#FBBF24"
                      fontSize="20"
                      className="pointer-events-none"
                    >
                      ‚≠ê
                    </text>
                  </svg>

                  {/* –°—Ç—Ä–µ–ª–æ—á–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å - —Å–≤–µ—Ä—Ö—É (0¬∞) */}
                  <div className="absolute top-1 left-1/2 transform -translate-x-1/2 z-10">
                    <div
                      className="w-0 h-0 border-l-[12px] sm:border-l-[15px] border-r-[12px] sm:border-r-[15px] border-b-[20px] sm:border-b-[25px] border-l-transparent border-r-transparent border-b-yellow-400 drop-shadow-lg"
                      style={{
                        filter: 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.3))'
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */}
            <div className="text-center min-h-[60px] sm:min-h-[80px] flex flex-col items-center justify-center">
              {gameState === 'idle' && (
                <div className="space-y-2">
                  <p className="text-gray-400 text-sm sm:text-base">–ù–∞–∂–º–∏—Ç–µ "–ö—Ä—É—Ç–∏—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>
                  <div className="text-xs text-gray-500">
                    <p>–®–∞–Ω—Å—ã: 20% - 1 –¥–µ–Ω—å, 10% - 3 –¥–Ω—è, 70% - –ø—É—Å—Ç–æ</p>
                  </div>
                </div>
              )}

              {gameState === 'spinning' && (
                <div className="flex flex-col items-center gap-3 text-yellow-400">
                  <div className="animate-pulse text-2xl sm:text-3xl">üé∞</div>
                  <span className="font-medium text-sm sm:text-base">–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...</span>
                </div>
              )}

              {gameState === 'finished' && gameResult && (
                <div className="space-y-3">
                  <div className="text-3xl sm:text-4xl">
                    {winnerIndex !== null && rouletteItems[winnerIndex].type !== 'empty' ? 'üéâ' : 'üòî'}
                  </div>
                  <p className={`font-medium text-sm sm:text-lg ${
                    winnerIndex !== null && rouletteItems[winnerIndex].type !== 'empty'
                      ? 'text-green-400'
                      : 'text-red-400'
                  }`}>
                    {gameResult}
                  </p>
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex gap-3">
              {gameState === 'idle' && (
                <button
                  onClick={handleSpin}
                  disabled={isSpinning}
                  className="flex-1 py-3 sm:py-4 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-500 hover:to-red-600 text-white rounded-xl font-medium transition-all duration-200 disabled:opacity-50 text-sm sm:text-lg shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95"
                >
                  üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É!
                </button>
              )}

              <button
                onClick={onClose}
                className={`py-3 sm:py-4 bg-gray-700 hover:bg-gray-600 text-white rounded-xl font-medium transition-all duration-200 text-sm sm:text-base ${
                  gameState === 'idle' ? 'px-6 sm:px-8' : 'flex-1'
                }`}
              >
                {gameState === 'finished' ? '–ì–æ—Ç–æ–≤–æ' : '–û—Ç–º–µ–Ω–∞'}
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö */}
            {gameState === 'idle' && (
              <div className="text-center pt-4 border-t border-gray-700/50">
                <div className="text-xs text-gray-500 space-y-2">
                  <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</p>
                  <div className="flex justify-center gap-4 sm:gap-6 text-gray-400">
                    <span className="flex items-center gap-1 text-xs sm:text-sm">
                      <span className="text-yellow-400">‚≠ê</span>
                      +1 –î–µ–Ω—å
                    </span>
                    <span className="flex items-center gap-1 text-xs sm:text-sm">
                      <span className="text-green-400">üíé</span>
                      +3 –î–Ω—è
                    </span>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </Modal>
  );
};

export default RouletteGame;
