import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { Wheel } from 'react-custom-roulette';
import { usePlayRouletteMutation } from '../features/user/userApi';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 9 —Å–µ–∫—Ü–∏–π —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const wheelData = [
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 0
  { option: '1 –¥–µ–Ω—å', style: { backgroundColor: '#059669', textColor: '#FFFFFF' } },      // 1
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 2
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 3
  { option: '2 –¥–Ω—è', style: { backgroundColor: '#DC2626', textColor: '#FFFFFF' } },       // 4
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 5
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 6
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } },       // 7
  { option: '–ü—É—Å—Ç–æ', style: { backgroundColor: '#6B7280', textColor: '#FFFFFF' } }        // 8
];

interface RouletteGameProps {
  isOpen: boolean;
  onClose: () => void;
  className?: string;
}

const RouletteGame: React.FC<RouletteGameProps> = ({ isOpen, onClose, className = '' }) => {
  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [result, setResult] = useState<string | null>(null);
  const [nextPlayTime, setNextPlayTime] = useState<string | null>(null);
  const [startingPosition, setStartingPosition] = useState(0);

  const [playRoulette, { isLoading, error }] = usePlayRouletteMutation();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å
  const canPlay = !mustSpin && !isLoading && !nextPlayTime;

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
    const savedNextPlayTime = localStorage.getItem('roulette_next_play_time');
    if (savedNextPlayTime) {
      const nextTime = new Date(savedNextPlayTime);
      if (nextTime > new Date()) {
        setNextPlayTime(savedNextPlayTime);
      } else {
        localStorage.removeItem('roulette_next_play_time');
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–ª–µ—Å–∞
    const savedPosition = localStorage.getItem('roulette_last_position');
    if (savedPosition) {
      setStartingPosition(parseInt(savedPosition, 10));
    }
  }, []);

  const spin = async () => {
    if (!canPlay) return;

    setResult(null);

    try {
      const response = await playRoulette().unwrap();

      if (response.success) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        setPrizeNumber(response.winner_index);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–ª–µ—Å–∞
        setMustSpin(true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
        setNextPlayTime(response.next_time);
        localStorage.setItem('roulette_next_play_time', response.next_time);
      } else {
        setResult(response.message);
        if (response.next_time) {
          setNextPlayTime(response.next_time);
          localStorage.setItem('roulette_next_play_time', response.next_time);
        }
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Ä—É–ª–µ—Ç–∫—É:', err);
      setResult(err.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
  const handleSpinComplete = () => {
    setMustSpin(false);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–ª–µ—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
    setStartingPosition(prizeNumber);
    localStorage.setItem('roulette_last_position', prizeNumber.toString());

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const wonSegment = wheelData[prizeNumber];
    if (wonSegment.option === '–ü—É—Å—Ç–æ') {
      setResult('–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!');
    } else if (wonSegment.option === '1 –¥–µ–Ω—å') {
      setResult('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!');
    } else if (wonSegment.option === '2 –¥–Ω—è') {
      setResult('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏!');
    }
  };

  const formatTimeRemaining = (nextTime: string) => {
    const now = new Date();
    const next = new Date(nextTime);
    const diff = next.getTime() - now.getTime();

    if (diff <= 0) {
      setNextPlayTime(null);
      localStorage.removeItem('roulette_next_play_time');
      return '';
    }

    const totalMinutes = Math.ceil(diff / (1000 * 60));

    if (totalMinutes < 60) {
      return `${totalMinutes}–º`;
    } else {
      const hours = Math.floor(totalMinutes / 60);
      const minutes = totalMinutes % 60;
      return `${hours}—á ${minutes}–º`;
    }
  };



  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
  useEffect(() => {
    if (isOpen) {
      const originalOverflow = document.body.style.overflow;
      document.body.style.overflow = 'hidden';

      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      return () => {
        document.body.style.overflow = originalOverflow;
      };
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const modalContent = (
    <div className="fixed inset-0 z-[9999999] flex items-center justify-center p-4 overflow-y-auto">
      {/* Backdrop */}
      <div
        className="absolute inset-0 bg-black bg-opacity-75 backdrop-blur-sm"
        onClick={onClose}
      />

      {/* Modal */}
      <div className="relative bg-gray-900 rounded-lg shadow-xl max-w-2xl w-full mx-4 my-auto max-h-[90vh] overflow-y-auto border border-gray-700">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <h3 className="text-xl font-bold text-white">
            üé∞ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className={`p-6 flex flex-col items-center space-y-4 ${className}`}>
          <div className="text-center">
            <p className="text-gray-300 text-sm mb-1">–ö—Ä—É—Ç–∏ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!</p>
            <p className="text-xs text-gray-400">30 –∏–≥—Ä –≤ –¥–µ–Ω—å ‚Ä¢ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∫–∞–∂–¥—ã–µ 48 –º–∏–Ω—É—Ç</p>
          </div>

          {/* –ö–æ–ª–µ—Å–æ —Ä—É–ª–µ—Ç–∫–∏ */}
          <div className="relative flex justify-center">
            <Wheel
              mustStartSpinning={mustSpin}
              prizeNumber={prizeNumber}
              data={wheelData}
              onStopSpinning={handleSpinComplete}
              backgroundColors={['#3f3f46', '#71717a']}
              textColors={['#ffffff']}
              outerBorderColor="#374151"
              outerBorderWidth={8}
              innerRadius={30}
              innerBorderColor="#1f2937"
              innerBorderWidth={3}
              radiusLineColor="#374151"
              radiusLineWidth={2}
              fontSize={14}
              textDistance={80}
              spinDuration={0.8}
              startingOptionIndex={startingPosition}
              disableInitialAnimation={true}
              pointerProps={{
                src: undefined,
                style: {
                  transform: 'rotate(0deg)',
                }
              }}
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è */}
          <div className="text-center">
            {nextPlayTime ? (
              <div className="space-y-2">
                <p className="text-gray-300">–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑:</p>
                <p className="text-xl font-bold text-yellow-400">
                  {formatTimeRemaining(nextPlayTime)}
                </p>
              </div>
            ) : (
              <button
                onClick={spin}
                disabled={!canPlay}
                className={`px-8 py-3 rounded-lg font-bold text-lg transition-colors ${
                  canPlay
                    ? 'bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white'
                    : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                }`}
              >
                {mustSpin ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ'}
              </button>
            )}
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          {result && (
            <div className="text-center p-4 bg-gray-800 rounded-lg border border-gray-600">
              <p className="text-lg font-semibold text-white">{result}</p>
            </div>
          )}

          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <div className="text-center p-4 bg-red-900 rounded-lg border border-red-600">
              <p className="text-red-200">
                {'data' in error && error.data && typeof error.data === 'object' && 'message' in error.data
                  ? (error.data as any).message
                  : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'}
              </p>
            </div>
          )}

          {/* –õ–µ–≥–µ–Ω–¥–∞ */}
          <div className="text-center space-y-2">
            <h3 className="text-lg font-semibold text-white">–ü—Ä–∏–∑—ã:</h3>
            <div className="flex flex-wrap justify-center gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 rounded" style={{ backgroundColor: '#059669' }}></div>
                <span className="text-gray-300 font-semibold">1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 rounded" style={{ backgroundColor: '#DC2626' }}></div>
                <span className="text-gray-300 font-semibold">2 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-gray-600 rounded"></div>
                <span className="text-gray-400">–ü—É—Å—Ç–æ</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª
  return createPortal(modalContent, document.body);
};

export default RouletteGame;
