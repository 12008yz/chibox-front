import { createListenerMiddleware } from '@reduxjs/toolkit';
import { authApi } from '../../features/auth/authApi';
import { loginSuccess } from '../../features/auth/authSlice';
import { baseApi } from '../api/baseApi';

// –°–æ–∑–¥–∞–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const authMiddleware = createListenerMiddleware();

// –°–ª—É—à–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏–Ω–∞
authMiddleware.startListening({
  matcher: authApi.endpoints.login.matchFulfilled,
  effect: async (action, listenerApi) => {
    const result = action.payload;

    if (result.success && result.data) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux
      listenerApi.dispatch(loginSuccess(result.data));
    }
  },
});

// –°–ª—É—à–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
authMiddleware.startListening({
  matcher: authApi.endpoints.register.matchFulfilled,
  effect: async (action, listenerApi) => {
    const result = action.payload;

    // if (result.success && result.data) {
    //   // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux
    //   listenerApi.dispatch(loginSuccess(result.data));
    // }
  },
});

// –°–ª—É—à–∞–µ–º loginSuccess action (–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ—Ç Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
authMiddleware.startListening({
  actionCreator: loginSuccess,
  effect: async (action, listenerApi) => {
    console.log('üîÑ LoginSuccess detected, invalidating cache...');

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    listenerApi.dispatch(
      baseApi.util.invalidateTags(['User', 'Profile', 'Balance', 'Inventory'])
    );

    console.log('‚úÖ Cache invalidated after login');
  },
});
