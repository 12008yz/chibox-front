// –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤—É–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SoundManager {
  private sounds: Map<string, HTMLAudioElement> = new Map();
  private activeClones: Set<HTMLAudioElement> = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–æ–Ω—ã
  private soundsEnabled: boolean = true;
  private volume: number = 0.5;
  private audioContext: AudioContext | null = null;
  private unlocked: boolean = false;
  private lastPlayTime: Map<string, number> = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  private minPlayInterval: number = 100; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏ –≤ –º—Å

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏
  private soundPaths = {
    click: '/sounds/click.mp3',
    upgrade: '/sounds/upgrade.mp3',
    notification: '/sounds/notifications.mp3',
    openCase: '/sounds/openCase fromInvintory.mp3',
    slotSpin: '/sounds/slot.mp3',
    slotWin: '/sounds/slot win.mp3',
    slotLose: '/sounds/slot loose.mp3',
    gameOver: '/sounds/gameOver.mp3',
    win: '/sounds/torzhestvo.mp3',
    lose: '/sounds/losing-lose.mp3',
    horrorLose: '/sounds/horror-loose.mp3',
    process: '/sounds/PPP.mp3',
    endProcess: '/sounds/end PPP.mp3',
    change: '/sounds/+-.mp3',
    draw: '/sounds/–Ω–∏—á—å—è.mp3',
    modal: '/sounds/–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.mp3',
    sellItem: '/sounds/–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.mp3',
    uiClick: '/sounds/–∫–ª–∏–∫.mp3',
  };

  constructor() {
    this.preloadSounds();
    this.initAudioContext();
    this.setupUnlockListeners();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioContext –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–≤—É–∫–æ–≤
  private initAudioContext() {
    try {
      const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;
      if (AudioContextClass) {
        this.audioContext = new AudioContextClass();
        console.log('üîä SoundManager: AudioContext —Å–æ–∑–¥–∞–Ω');
      }
    } catch (error) {
      console.warn('üîá SoundManager: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AudioContext', error);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  private setupUnlockListeners() {
    const unlockAudio = () => {
      if (this.unlocked) return;

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º AudioContext
      if (this.audioContext && this.audioContext.state === 'suspended') {
        this.audioContext.resume().then(() => {
          console.log('üîä SoundManager: AudioContext —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        });
      }

      // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–∏—Ö–∏–π –∑–≤—É–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      this.sounds.forEach((audio) => {
        const originalVolume = audio.volume;
        audio.volume = 0.01;
        const playPromise = audio.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              audio.pause();
              audio.currentTime = 0;
              audio.volume = originalVolume;
            })
            .catch(() => {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            });
        }
      });

      this.unlocked = true;
      console.log('üîä SoundManager: –ó–≤—É–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      document.removeEventListener('click', unlockAudio);
      document.removeEventListener('touchstart', unlockAudio);
      document.removeEventListener('keydown', unlockAudio);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    document.addEventListener('click', unlockAudio, { once: false });
    document.addEventListener('touchstart', unlockAudio, { once: false });
    document.addEventListener('keydown', unlockAudio, { once: false });
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤
  private preloadSounds() {
    let loadedCount = 0;
    const totalSounds = Object.keys(this.soundPaths).length;

    Object.entries(this.soundPaths).forEach(([key, path]) => {
      try {
        const audio = new Audio();
        audio.preload = 'auto';
        audio.volume = this.volume;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        audio.addEventListener('canplaythrough', () => {
          loadedCount++;
          console.log(`üîä SoundManager: –ó–∞–≥—Ä—É–∂–µ–Ω –∑–≤—É–∫ "${key}" (${loadedCount}/${totalSounds})`);
          if (loadedCount === totalSounds) {
            console.log('üîä SoundManager: –í—Å–µ –∑–≤—É–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
          }
        }, { once: true });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        audio.addEventListener('error', (e) => {
          console.error(`üîá SoundManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞ "${key}" –∏–∑ "${path}"`, e);
        }, { once: true });

        audio.src = path;
        this.sounds.set(key, audio);
      } catch (error) {
        console.error(`üîá SoundManager: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ "${key}"`, error);
      }
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–æ–≤
  setSoundsEnabled(enabled: boolean) {
    this.soundsEnabled = enabled;
    console.log(`üîä SoundManager: –ó–≤—É–∫–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);

    if (!enabled) {
      this.stopAll();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–æ–≤
  getSoundsEnabled(): boolean {
    return this.soundsEnabled;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0.0 - 1.0)
  setVolume(volume: number) {
    this.volume = Math.max(0, Math.min(1, volume));
    console.log(`üîä SoundManager: –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${Math.round(this.volume * 100)}%`);

    this.sounds.forEach(audio => {
      audio.volume = this.volume;
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  getVolume(): number {
    return this.volume;
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
  play(soundKey: string, loop: boolean = false, ignoreThrottle: boolean = false) {
    if (!this.soundsEnabled) {
      console.log(`üîá SoundManager: –ó–≤—É–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º "${soundKey}"`);
      return;
    }

    const sound = this.sounds.get(soundKey);
    if (!sound) {
      console.warn(`üîá SoundManager: –ó–≤—É–∫ "${soundKey}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      console.log('üîä SoundManager: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–≤—É–∫–∏:', Array.from(this.sounds.keys()).join(', '));
      return;
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ ignoreThrottle)
    if (!ignoreThrottle) {
      const now = Date.now();
      const lastPlay = this.lastPlayTime.get(soundKey) || 0;
      if (now - lastPlay < this.minPlayInterval) {
        console.log(`üîá SoundManager: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${soundKey}" - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (${now - lastPlay}–º—Å)`);
        return;
      }
      this.lastPlayTime.set(soundKey, now);
    }

    try {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–≤—É–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const clone = sound.cloneNode() as HTMLAudioElement;
      clone.volume = this.volume;
      clone.loop = loop;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ–Ω –≤ Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      this.activeClones.add(clone);

      // –£–¥–∞–ª—è–µ–º –∫–ª–æ–Ω –∏–∑ Set –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ü–∏–∫–ª–µ–Ω)
      if (!loop) {
        clone.addEventListener('ended', () => {
          this.activeClones.delete(clone);
        }, { once: true });
      }

      const playPromise = clone.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log(`üîä SoundManager: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∑–≤—É–∫ "${soundKey}"${loop ? ' (–∑–∞—Ü–∏–∫–ª–µ–Ω)' : ''}`);
          })
          .catch(error => {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            this.activeClones.delete(clone);

            if (error.name === 'NotAllowedError') {
              console.warn(`üîá SoundManager: –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ "${soundKey}". –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
              if (!this.unlocked) {
                console.log('üîä SoundManager: –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–≤—É–∫–æ–≤');
              }
            } else if (error.name === 'NotSupportedError') {
              console.error(`üîá SoundManager: –§–æ—Ä–º–∞—Ç –∑–≤—É–∫–∞ "${soundKey}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`, error);
            } else {
              console.error(`üîá SoundManager: –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${soundKey}"`, error);
            }
          });
      }
    } catch (error) {
      console.error(`üîá SoundManager: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ "${soundKey}"`, error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤
  stopAll() {
    console.log('üîä SoundManager: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏
    this.sounds.forEach((sound, key) => {
      try {
        sound.pause();
        sound.currentTime = 0;
      } catch (error) {
        console.warn(`üîá SoundManager: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫ "${key}"`, error);
      }
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–æ–Ω—ã
    this.activeClones.forEach((clone) => {
      try {
        clone.pause();
        clone.currentTime = 0;
      } catch (error) {
        console.warn(`üîá SoundManager: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–æ–Ω`, error);
      }
    });

    // –û—á–∏—â–∞–µ–º Set –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–æ–Ω–æ–≤
    this.activeClones.clear();
    console.log('üîä SoundManager: –í—Å–µ –∑–≤—É–∫–∏ –∏ –∫–ª–æ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–≤—É–∫–∞ (–¥–ª—è –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤)
  stop(soundKey: string) {
    console.log(`üîä SoundManager: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ "${soundKey}"`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫ –µ—Å–ª–∏ –æ–Ω –∏–≥—Ä–∞–µ—Ç
    const sound = this.sounds.get(soundKey);
    if (sound) {
      try {
        sound.pause();
        sound.currentTime = 0;
      } catch (error) {
        console.warn(`üîá SoundManager: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–≤—É–∫ "${soundKey}"`, error);
      }
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–ª–æ–Ω—ã —ç—Ç–æ–≥–æ –∑–≤—É–∫–∞
    this.activeClones.forEach((clone) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∫–ª–æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç soundKey (–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø–æ src)
        if (sound && clone.src === sound.src) {
          clone.pause();
          clone.currentTime = 0;
          this.activeClones.delete(clone);
        }
      } catch (error) {
        console.warn(`üîá SoundManager: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–æ–Ω "${soundKey}"`, error);
      }
    });

    console.log(`üîä SoundManager: –ó–≤—É–∫ "${soundKey}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–æ–≤
  getLoadedSounds(): string[] {
    const loaded: string[] = [];
    this.sounds.forEach((audio, key) => {
      if (audio.readyState >= 3) { // HAVE_FUTURE_DATA –∏–ª–∏ HAVE_ENOUGH_DATA
        loaded.push(key);
      }
    });
    return loaded;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–≤—É–∫–∞
  isSoundLoaded(soundKey: string): boolean {
    const sound = this.sounds.get(soundKey);
    return sound ? sound.readyState >= 3 : false;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const soundManager = new SoundManager();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useSound = () => {
  return soundManager;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  (window as any).soundManager = soundManager;
  console.log('üîä SoundManager: –î–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ window.soundManager');
}
